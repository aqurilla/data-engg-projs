# -*- coding: utf-8 -*-
"""2_createtable_cass.ipynb

Automatically generated by Colaboratory.

# Cassandra setup and basics
"""

# SSH into colab instance for prerequisite setups
# ngrok only allows one instance at a time

#Generate root password
import random, string
password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(20))

#Download ngrok
! wget -q -c -nc https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
! unzip -qq -n ngrok-stable-linux-amd64.zip
#Setup sshd
! apt-get install -qq -o=Dpkg::Use-Pty=0 openssh-server pwgen > /dev/null
#Set root password
! echo root:$password | chpasswd
! mkdir -p /var/run/sshd
! echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
! echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
! echo "LD_LIBRARY_PATH=/usr/lib64-nvidia" >> /root/.bashrc
! echo "export LD_LIBRARY_PATH" >> /root/.bashrc

#Run sshd
get_ipython().system_raw('/usr/sbin/sshd -D &')

#Ask token
print("Copy authtoken from https://dashboard.ngrok.com/auth")
import getpass
authtoken = getpass.getpass()

#Create tunnel
get_ipython().system_raw('./ngrok authtoken $authtoken && ./ngrok tcp 22 &')
#Print root password
print("Root password: {}".format(password))
#Get public address
! curl -s http://localhost:4040/api/tunnels | python3 -c "import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])"

# cassandra requires jdk 8
! apt-get install openjdk-8-jdk-headless -qq > /dev/null
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
! update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
! java -version

# run cassandra service in the colab instance

# curl http://apache-mirror.8birdsvideo.com/cassandra/3.11.5/apache-cassandra-3.11.5-bin.tar.gz -o cassandra_3_11_5
# tar -xzvf cassandra_3_11_5
# cassandra_3_11_5/bin/cassandra -R -f

! pip install cassandra-driver

import cassandra
from cassandra.cluster import Cluster

try:
  cluster = Cluster(['127.0.0.1']) # connect to the local cluster instance
  session = cluster.connect()
except Exception as e:
  print("Error connecting")

# Create a keyspace

try:
  session.execute("""CREATE KEYSPACE IF NOT EXISTS testks \
                   WITH REPLICATION = {'class' : 'SimpleStrategy', 'replication_factor' : 1}""")
except Exception as e:
  print(e)
  print("Error creating table")

# connect to the created keyspace
try:
  session.set_keyspace("testks")
except Exception as e:
  print(e)
  print("Error connecting to keyspace")

# design based on possible queries
query = "CREATE TABLE IF NOT EXISTS music_lib "
query = query + "(year int, artist_name text, album_name text, PRIMARY KEY (year, artist_name))"
try:
  session.execute(query)
except Exception as e:
  print(e)
  print("Error creating table")

# insert data into the created table

query = "INSERT INTO music_lib (year, artist_name, album_name)"
query = query + " VALUES (%s, %s, %s)"

try:
  session.execute(query, (2020, "Plato", "Joi de Vivre"))
except Exception as e:
  print(e)
  print("Error inserting")

try:
  session.execute(query, (2010, "Coldplay", "Goals for the Morrow"))
except Exception as e:
  print(e)
  print("Error inserting")

# sanity check
query = "SELECT * FROM music_lib"

try:
  rows = session.execute(query)
except Exception as e:
  print(e)
  print("Error reading data")

for row in rows:
  print(row.year, row.artist_name, row.album_name)

# run the query used for modeling
query = "SELECT * FROM music_lib WHERE year = 2010"

try:
  rows = session.execute(query)
except Exception as e:
  print(e)
  print("Error reading data")

for row in rows:
  print(row.year, row.artist_name, row.album_name)

# drop table and close connections
query = "DROP TABLE music_lib"
try:
  rows = session.execute(query)
except Exception as e:
  print(e)
  print("Error dropping table")

session.shutdown()
cluster.shutdown()