# -*- coding: utf-8 -*-
"""4_denormalization.ipynb

Automatically generated by Colaboratory.

# Denormalizing tables
"""

# SSH into colab instance for prerequisite setups
# ngrok only allows one instance at a time

#Generate root password
import random, string
password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(20))

#Download ngrok
! wget -q -c -nc https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
! unzip -qq -n ngrok-stable-linux-amd64.zip
#Setup sshd
! apt-get install -qq -o=Dpkg::Use-Pty=0 openssh-server pwgen > /dev/null
#Set root password
! echo root:$password | chpasswd
! mkdir -p /var/run/sshd
! echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
! echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
! echo "LD_LIBRARY_PATH=/usr/lib64-nvidia" >> /root/.bashrc
! echo "export LD_LIBRARY_PATH" >> /root/.bashrc

#Run sshd
get_ipython().system_raw('/usr/sbin/sshd -D &')

#Ask token
print("Copy authtoken from https://dashboard.ngrok.com/auth")
import getpass
authtoken = getpass.getpass()

#Create tunnel
get_ipython().system_raw('./ngrok authtoken $authtoken && ./ngrok tcp 22 &')
#Print root password
print("Root password: {}".format(password))

#Get public address
! curl -s http://localhost:4040/api/tunnels | python3 -c "import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])"

# sudo apt install postgresql
# service postgresql start
# sudo su postgres
# psql
# CREATE USER student WITH PASSWORD 'student';
# CREATE DATABASE studentdb;

import psycopg2

# Connect to database
try:
  conn = psycopg2.connect("host=127.0.0.1 dbname=studentdb user=student password=student")
except psycopg2.Error as e:
  print(e)
  print("Error connecting")

# Get cursor
try:
  cur = conn.cursor()
except psycopg2.Error as e:
  print(e)
  print("Error getting cursor")

# set autocommit to true
conn.set_session(autocommit=True)

# Starting with the 3NF database tables from 3_normalization.py, along with a new table song_length

# Create tables

# album library table
try:
  cur.execute("CREATE TABLE IF NOT EXISTS album_lib (album_id int, \
                                                      album_name varchar, \
                                                      artist_id int, \
                                                      year int);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

# artist library table
try:
  cur.execute("CREATE TABLE IF NOT EXISTS artist_lib (artist_id int, \
                                                      artist_name varchar);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

# song library table
try:
  cur.execute("CREATE TABLE IF NOT EXISTS song_lib (song_id int, \
                                                      album_id int, \
                                                      song_name varchar);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

# song length table
try:
  cur.execute("CREATE TABLE IF NOT EXISTS song_length (song_id int, song_length int);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

# Insert data into tables

# Insert album data
try:
  cur.execute("INSERT INTO album_lib (album_id, album_name, artist_id, year) \
               VALUES (%s, %s, %s, %s)", \
               (1, 'Everyday Life', 1, 2019))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO album_lib (album_id, album_name, artist_id, year) \
               VALUES (%s, %s, %s, %s)", \
               (2, 'A Head Full of Dreams', 1, 2015))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")


# Insert song data
try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (1, 1, 'Sunrise'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (2, 1, 'Church'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (3, 1, 'Trouble in Town'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (4, 2, 'A Head Full of Dreams'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (5, 2, 'Birds'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (6, 2, 'Hymn for the Weekend'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")


# Insert artist data
try:
  cur.execute("INSERT INTO artist_lib (artist_id, artist_name) \
               VALUES (%s, %s)", \
               (1, 'Coldplay'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")


# Insert song length data
try:
  cur.execute("INSERT INTO song_length (song_id, song_length) \
               VALUES (%s, %s)", \
               (1, 257))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_length (song_id, song_length) \
               VALUES (%s, %s)", \
               (2, 213))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_length (song_id, song_length) \
               VALUES (%s, %s)", \
               (3, 274))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_length (song_id, song_length) \
               VALUES (%s, %s)", \
               (4, 176))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_length (song_id, song_length) \
               VALUES (%s, %s)", \
               (5, 191))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_length (song_id, song_length) \
               VALUES (%s, %s)", \
               (6, 213))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

# Check entries

# Album_lib
try:
  cur.execute("SELECT * FROM album_lib")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
print("Album library")
while row:
  print(row)
  row = cur.fetchone()

# Artist_lib
try:
  cur.execute("SELECT * FROM artist_lib")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
print("Artist library")
while row:
  print(row)
  row = cur.fetchone()

# Song_lib
try:
  cur.execute("SELECT * FROM song_lib")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
print("Song library")
while row:
  print(row)
  row = cur.fetchone()

# Song length lib
try:
  cur.execute("SELECT * FROM song_length")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
print("Song length")
while row:
  print(row)
  row = cur.fetchone()

'''
Denormalization is generally done in warehouses in order to improve performance
by considering possible queries that can be asked, and trying to reduce the number 
of joins necessary for these queries. Simpler queries and a reduced number of joins
will improve performance

Suppose a query requires the total length of each album. In place of a join, a new
table can be created with required information
'''
try:
  cur.execute("CREATE TABLE IF NOT EXISTS album_len (song_id int, \
                                                     album_id int, \
                                                     song_length int);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")


# Insert data

try:
  cur.execute("INSERT INTO album_len (song_id, album_id, song_length) \
               VALUES (%s, %s, %s)", \
               (1, 1, 257))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO album_len (song_id, album_id, song_length) \
               VALUES (%s, %s, %s)", \
               (2, 1, 213))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO album_len (song_id, album_id, song_length) \
               VALUES (%s, %s, %s)", \
               (3, 1, 274))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO album_len (song_id, album_id, song_length) \
               VALUES (%s, %s, %s)", \
               (4, 2, 176))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO album_len (song_id, album_id, song_length) \
               VALUES (%s, %s, %s)", \
               (5, 2, 191))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO album_len (song_id, album_id, song_length) \
               VALUES (%s, %s, %s)", \
               (6, 2, 213))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

# Run query to obtain total album length

try:
  cur.execute("SELECT album_id, SUM(song_length) FROM album_len GROUP BY album_id;")
except psycopg2.Error as e: 
  print(e)
  print("Error reading data")

row = cur.fetchone()
while row:
   print(row)
   row = cur.fetchone()

# Close cursor and connection
cur.close()
conn.close()

