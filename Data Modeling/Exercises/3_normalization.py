# -*- coding: utf-8 -*-
"""3_normalization.ipynb

Automatically generated by Colaboratory.

# Normalizing relations
"""

# SSH into colab instance for prerequisite setups
# ngrok only allows one instance at a time

#Generate root password
import random, string
password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(20))

#Download ngrok
! wget -q -c -nc https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
! unzip -qq -n ngrok-stable-linux-amd64.zip
#Setup sshd
! apt-get install -qq -o=Dpkg::Use-Pty=0 openssh-server pwgen > /dev/null
#Set root password
! echo root:$password | chpasswd
! mkdir -p /var/run/sshd
! echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
! echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
! echo "LD_LIBRARY_PATH=/usr/lib64-nvidia" >> /root/.bashrc
! echo "export LD_LIBRARY_PATH" >> /root/.bashrc

#Run sshd
get_ipython().system_raw('/usr/sbin/sshd -D &')

#Ask token
print("Copy authtoken from https://dashboard.ngrok.com/auth")
import getpass
authtoken = getpass.getpass()

#Create tunnel
get_ipython().system_raw('./ngrok authtoken $authtoken && ./ngrok tcp 22 &')
#Print root password
print("Root password: {}".format(password))

#Get public address
! curl -s http://localhost:4040/api/tunnels | python3 -c "import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])"

# setup postgresql in colab terminal
# https://itsfoss.com/install-postgresql-ubuntu/

# Install postgresql, create a user 'student' with password 'student', 
# and create a database 'studentdb'.

# sudo apt install postgresql
# service postgresql start
# sudo su postgres
# psql
# ALTER USER student WITH PASSWORD 'student';
# CREATE DATABASE studentdb;

import psycopg2

# Connect to database
try:
  conn = psycopg2.connect("host=127.0.0.1 dbname=studentdb user=student password=student")
except psycopg2.Error as e:
  print(e)
  print("Error connecting")

# Get cursor
try:
  cur = conn.cursor()
except psycopg2.Error as e:
  print(e)
  print("Error getting cursor")

# set autocommit to true
conn.set_session(autocommit=True)

"""Initially table (music_lib) has columns album id, album name, artist name, year and list of songs"""

# Create initial table

try:
  cur.execute("CREATE TABLE IF NOT EXISTS music_lib (album_id int, \
                                                     album_name varchar, \
                                                     artist_name varchar, \
                                                     year int, \
                                                     songs text[]);")
except psycopg2.Error as e:
  print(e)
  print("Error creating initial table")

# Insert data into table
try:
  cur.execute("INSERT INTO music_lib (album_id, album_name, artist_name, year, songs) \
               VALUES (%s, %s, %s, %s, %s)", \
               (1, 'Everyday Life', 'Coldplay', 2019, ['Sunrise', 'Church', 'Trouble in Town']))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO music_lib (album_id, album_name, artist_name, year, songs) \
               VALUES (%s, %s, %s, %s, %s)", \
               (2, 'A Head Full of Dreams', 'Coldplay', 2015, ['A Head Full of Dreams', 'Birds', 'Hymn for the Weekend']))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

# Confirm data records
try:
  cur.execute("SELECT * FROM music_lib;")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
while row:
  print(row)
  row = cur.fetchone()

"""The data contains a list of entries for the songs column. For moving into the first normal form, the table should not have any multi-valued attributes. So, each song in a list should have individual entries in the table."""

try:
  cur.execute("CREATE TABLE IF NOT EXISTS music_lib2 (album_id int, \
                                                      album_name varchar, \
                                                      artist_name varchar, \
                                                      year int, \
                                                      song_name varchar);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

# Insert song data
try:
  cur.execute("INSERT INTO music_lib2 (album_id, album_name, artist_name, year, song_name) \
               VALUES (%s, %s, %s, %s, %s)", \
               (1, 'Everyday Life', 'Coldplay', 2019, 'Sunrise'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO music_lib2 (album_id, album_name, artist_name, year, song_name) \
               VALUES (%s, %s, %s, %s, %s)", \
               (1, 'Everyday Life', 'Coldplay', 2019, 'Church'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO music_lib2 (album_id, album_name, artist_name, year, song_name) \
               VALUES (%s, %s, %s, %s, %s)", \
               (1, 'Everyday Life', 'Coldplay', 2019, 'Trouble in Town'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO music_lib2 (album_id, album_name, artist_name, year, song_name) \
               VALUES (%s, %s, %s, %s, %s)", \
               (2, 'A Head Full of Dreams', 'Coldplay', 2015, 'A Head Full of Dreams'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO music_lib2 (album_id, album_name, artist_name, year, song_name) \
               VALUES (%s, %s, %s, %s, %s)", \
               (2, 'A Head Full of Dreams', 'Coldplay', 2015, 'Birds'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO music_lib2 (album_id, album_name, artist_name, year, song_name) \
               VALUES (%s, %s, %s, %s, %s)", \
               (2, 'A Head Full of Dreams', 'Coldplay', 2015, 'Hymn for the Weekend'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

# Read data
try:
  cur.execute("SELECT * FROM music_lib2")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
while row:
  print(row)
  row = cur.fetchone()

"""Now the table is in 1NF. A relation is in 2NF if it is in 1NF, and every non-key attribute is fully functionally dependent on the PK. The table needs to be split into album and song tables"""

# Create tables
try:
  cur.execute("CREATE TABLE IF NOT EXISTS album_lib (album_id int, \
                                                      album_name varchar, \
                                                      artist_name varchar, \
                                                      year int);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

try:
  cur.execute("CREATE TABLE IF NOT EXISTS song_lib (song_id int, \
                                                      album_id int, \
                                                      song_name varchar);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

# Insert album data
try:
  cur.execute("INSERT INTO album_lib (album_id, album_name, artist_name, year) \
               VALUES (%s, %s, %s, %s)", \
               (1, 'Everyday Life', 'Coldplay', 2019))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO album_lib (album_id, album_name, artist_name, year) \
               VALUES (%s, %s, %s, %s)", \
               (2, 'A Head Full of Dreams', 'Coldplay', 2015))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

# Insert song data
try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (1, 1, 'Sunrise'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (2, 1, 'Church'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (3, 1, 'Trouble in Town'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (4, 2, 'A Head Full of Dreams'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (5, 2, 'Birds'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO song_lib (song_id, album_id, song_name) \
               VALUES (%s, %s, %s)", \
               (6, 2, 'Hymn for the Weekend'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

# Read album data
try:
  cur.execute("SELECT * FROM album_lib")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
while row:
  print(row)
  row = cur.fetchone()

# Read song data
try:
  cur.execute("SELECT * FROM song_lib")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
while row:
  print(row)
  row = cur.fetchone()

"""To bring the relation into 3NF, all transitive dependencies also have to be removed. Here artist info from album library is moved to a separate table."""

# Create tables
try:
  cur.execute("CREATE TABLE IF NOT EXISTS album_lib2 (album_id int, \
                                                      album_name varchar, \
                                                      artist_id int, \
                                                      year int);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

try:
  cur.execute("CREATE TABLE IF NOT EXISTS artist_lib (artist_id int, \
                                                      artist_name varchar);")
except psycopg2.Error as e:
  print(e)
  print("Error creating table")

# Insert artist data
try:
  cur.execute("INSERT INTO artist_lib (artist_id, artist_name) \
               VALUES (%s, %s)", \
               (1, 'Coldplay'))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

# Insert updated album data
try:
  cur.execute("INSERT INTO album_lib2 (album_id, album_name, artist_id, year) \
               VALUES (%s, %s, %s, %s)", \
               (1, 'Everyday Life', 1, 2019))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

try:
  cur.execute("INSERT INTO album_lib2 (album_id, album_name, artist_id, year) \
               VALUES (%s, %s, %s, %s)", \
               (2, 'A Head Full of Dreams', 1, 2015))
except psycopg2.Error as e:
  print(e)
  print("Error inserting data")

# Read data to ensure correctness

# Read artist data
try:
  cur.execute("SELECT * FROM artist_lib")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
while row:
  print(row)
  row = cur.fetchone()

# Read album data
try:
  cur.execute("SELECT * FROM album_lib2")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
while row:
  print(row)
  row = cur.fetchone()

# Retrieve the original form of the table by joining data
try:
  cur.execute("SELECT * FROM (artist_lib JOIN album_lib2 ON album_lib2.artist_id = artist_lib.artist_id) JOIN \
                              song_lib ON album_lib2.album_id = song_lib.album_id;")
except psycopg2.Error as e:
  print(e)
  print("Error reading data")

row = cur.fetchone()
while row:
  print(row)
  row = cur.fetchone()

# Relation is now in 3NF. 

# Close cursor and connection
cur.close()
conn.close()